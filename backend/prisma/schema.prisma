// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  isActive  Boolean  @default(true)
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  auditLogs      AuditLog[]
  notifications  Notification[]

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  resource    String
  action      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  notes     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contracts    Contract[]
  transactions Transaction[]
  invoices     Invoice[]
  vouchers     Voucher[]

  @@map("customers")
}

model Unit {
  id          String   @id @default(cuid())
  name        String
  description String?
  location    String?
  price       Decimal  @default(0)
  notes       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  contracts       Contract[]
  transactions    Transaction[]
  partnerGroups   UnitPartnerGroup[]

  @@map("units")
}

model Contract {
  id            String    @id @default(cuid())
  contractNumber String   @unique
  customerId     String
  unitId         String
  contractDate   DateTime
  amount         Decimal  @default(0)
  status         String   @default("active")
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  customer     Customer     @relation(fields: [customerId], references: [id])
  unit         Unit         @relation(fields: [unitId], references: [id])
  installments Installment[]
  transactions Transaction[]
  invoices     Invoice[]
  vouchers     Voucher[]

  @@map("contracts")
}

model Installment {
  id          String    @id @default(cuid())
  contractId  String
  amount      Decimal
  dueDate     DateTime
  paidDate    DateTime?
  status      String    @default("pending")
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@map("installments")
}

model Transaction {
  id          String    @id @default(cuid())
  customerId  String?
  unitId      String?
  contractId  String?
  type        String    // income, expense, transfer
  amount      Decimal
  description String?
  date        DateTime  @default(now())
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  customer Customer? @relation(fields: [customerId], references: [id])
  unit     Unit?     @relation(fields: [unitId], references: [id])
  contract Contract? @relation(fields: [contractId], references: [id])

  @@map("transactions")
}

model Invoice {
  id            String    @id @default(cuid())
  invoiceNumber String    @unique
  customerId    String
  contractId    String?
  amount        Decimal
  tax           Decimal   @default(0)
  total         Decimal
  status        String    @default("pending")
  dueDate       DateTime?
  paidDate      DateTime?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  customer Customer  @relation(fields: [customerId], references: [id])
  contract Contract? @relation(fields: [contractId], references: [id])

  @@map("invoices")
}

model Partner {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  notes     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  partnerGroups PartnerGroupPartner[]
  debts         PartnerDebt[]

  @@map("partners")
}

model PartnerGroup {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  partners      PartnerGroupPartner[]
  units         UnitPartnerGroup[]

  @@map("partner_groups")
}

model PartnerGroupPartner {
  id            String       @id @default(cuid())
  partnerGroupId String
  partnerId     String
  partnerGroup  PartnerGroup @relation(fields: [partnerGroupId], references: [id], onDelete: Cascade)
  partner       Partner      @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@unique([partnerGroupId, partnerId])
  @@map("partner_group_partners")
}

model UnitPartnerGroup {
  id            String       @id @default(cuid())
  unitId        String
  partnerGroupId String
  unit          Unit         @relation(fields: [unitId], references: [id], onDelete: Cascade)
  partnerGroup  PartnerGroup @relation(fields: [partnerGroupId], references: [id], onDelete: Cascade)

  @@unique([unitId, partnerGroupId])
  @@map("unit_partner_groups")
}

model PartnerDebt {
  id          String    @id @default(cuid())
  partnerId   String
  amount      Decimal
  description String?
  dueDate     DateTime?
  paidDate    DateTime?
  status      String    @default("pending")
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  partner Partner @relation(fields: [partnerId], references: [id])

  @@map("partner_debts")
}

model Broker {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  notes     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  dues BrokerDue[]

  @@map("brokers")
}

model BrokerDue {
  id          String    @id @default(cuid())
  brokerId    String
  amount      Decimal
  description String?
  dueDate     DateTime?
  paidDate    DateTime?
  status      String    @default("pending")
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  broker Broker @relation(fields: [brokerId], references: [id])

  @@map("broker_dues")
}

model Safe {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  location    String?
  balance     Decimal  @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  transfers Transfer[]

  @@map("safes")
}

model Transfer {
  id          String    @id @default(cuid())
  fromSafeId  String
  toSafeId    String
  amount      Decimal
  description String?
  date        DateTime  @default(now())
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  fromSafe Safe @relation("TransferFrom", fields: [fromSafeId], references: [id])
  toSafe   Safe @relation("TransferTo", fields: [toSafeId], references: [id])

  @@map("transfers")
}

model Voucher {
  id            String    @id @default(cuid())
  voucherNumber String    @unique
  type          String    // receipt, payment
  customerId    String?
  contractId    String?
  amount        Decimal
  description   String?
  date          DateTime  @default(now())
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  customer Customer? @relation(fields: [customerId], references: [id])
  contract Contract? @relation(fields: [contractId], references: [id])

  @@map("vouchers")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String   @default("info")
  isRead    Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model KeyVal {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("key_vals")
}

model ReportTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String
  fields      Json
  filters     Json
  sorts       Json
  groups      Json
  format      String   @default("table")
  chartType   String?
  isPublic    Boolean  @default(false)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("report_templates")
}