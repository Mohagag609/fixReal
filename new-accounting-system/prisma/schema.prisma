// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Customers - مطابق لـ golden-dataset.json
model Customer {
  id         String  @id @default(cuid())
  name       String
  phone      String? @unique
  nationalId String? @unique
  address    String?
  status     String  @default("نشط")
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
  
  // Relations
  contracts Contract[]
  
  // Performance indexes for frequently queried columns
  @@index([status, deletedAt]) // For filtering active customers
  @@index([name]) // For name searches
  @@index([phone]) // For phone lookups
  @@index([createdAt]) // For date-based queries
  @@map("customers")
}

// Units - مطابق لـ golden-dataset.json
model Unit {
  id        String  @id @default(cuid())
  code      String  @unique
  name      String?
  unitType  String  @default("سكني")
  area      String?
  floor     String?
  building  String?
  totalPrice Float  @default(0)
  status    String  @default("متاحة")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  // Relations
  contracts         Contract[]
  installments      Installment[]
  vouchers          Voucher[]
  unitPartners      UnitPartner[]
  unitPartnerGroups UnitPartnerGroup[]
  
  // Performance indexes for frequently queried columns
  @@index([status, deletedAt]) // For filtering available units
  @@index([unitType, deletedAt]) // For filtering by type
  @@index([totalPrice]) // For price range queries
  @@index([createdAt]) // For date-based queries
  @@index([code]) // For code lookups
  @@map("units")
}

// Partners - مطابق لـ golden-dataset.json
model Partner {
  id        String  @id @default(cuid())
  name      String
  phone     String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  // Relations
  unitPartners         UnitPartner[]
  partnerDebts         PartnerDebt[]
  partnerGroupPartners PartnerGroupPartner[]
  
  // Performance indexes
  @@index([name]) // For name searches
  @@index([phone]) // For phone lookups
  @@index([deletedAt]) // For filtering active partners
  @@map("partners")
}

// UnitPartners - مطابق لـ golden-dataset.json
model UnitPartner {
  id        String  @id @default(cuid())
  unitId    String
  partnerId String
  percentage Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  // Relations
  unit    Unit    @relation(fields: [unitId], references: [id], onDelete: Cascade)
  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  
  // Performance indexes
  @@index([unitId, deletedAt]) // For unit partner lookups
  @@index([partnerId, deletedAt]) // For partner unit lookups
  @@unique([unitId, partnerId])
  @@map("unit_partners")
}

// Contracts - مطابق لـ golden-dataset.json
model Contract {
  id              String   @id @default(cuid())
  unitId          String
  customerId      String
  start           DateTime
  totalPrice      Float
  discountAmount  Float    @default(0)
  brokerName      String?
  brokerPercent   Float    @default(0)
  brokerAmount    Float    @default(0)
  commissionSafeId String?
  downPaymentSafeId String?
  maintenanceDeposit Float @default(0)
  installmentType String   @default("شهري")
  installmentCount Int     @default(0)
  extraAnnual     Int      @default(0)
  annualPaymentValue Float @default(0)
  downPayment     Float    @default(0)
  paymentType     String   @default("installment")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?
  
  // Relations
  unit      Unit  @relation(fields: [unitId], references: [id], onDelete: Cascade)
  customer  Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // Performance indexes
  @@index([unitId, deletedAt]) // For unit contract lookups
  @@index([customerId, deletedAt]) // For customer contract lookups
  @@index([start]) // For date range queries
  @@index([totalPrice]) // For price range queries
  @@index([createdAt]) // For date-based queries
  @@map("contracts")
}

// Installments - مطابق لـ golden-dataset.json
model Installment {
  id        String   @id @default(cuid())
  unitId    String
  amount    Float
  dueDate   DateTime
  status    String   @default("معلق")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  // Relations
  unit Unit @relation(fields: [unitId], references: [id], onDelete: Cascade)
  
  // Performance indexes
  @@index([unitId, deletedAt]) // For unit installment lookups
  @@index([status, deletedAt]) // For status filtering
  @@index([dueDate]) // For date range queries
  @@index([amount]) // For amount range queries
  @@map("installments")
}

// PartnerDebts - مطابق لـ golden-dataset.json
model PartnerDebt {
  id        String   @id @default(cuid())
  partnerId String
  amount    Float
  dueDate   DateTime
  status    String   @default("معلق")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  // Relations
  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  
  @@map("partner_debts")
}

// Safes - مطابق لـ golden-dataset.json
model Safe {
  id        String   @id @default(cuid())
  name      String   @unique
  balance   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  // Relations
  vouchers        Voucher[]
  transfersFrom   Transfer[] @relation("TransferFrom")
  transfersTo     Transfer[] @relation("TransferTo")
  
  @@map("safes")
}

// Transfers - مطابق لـ golden-dataset.json
model Transfer {
  id          String   @id @default(cuid())
  fromSafeId  String
  toSafeId    String
  amount      Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  // Relations
  fromSafe Safe @relation("TransferFrom", fields: [fromSafeId], references: [id], onDelete: Cascade)
  toSafe   Safe @relation("TransferTo", fields: [toSafeId], references: [id], onDelete: Cascade)
  
  @@map("transfers")
}

// Vouchers - مطابق لـ golden-dataset.json
model Voucher {
  id          String   @id @default(cuid())
  type        String   // receipt or payment
  date        DateTime
  amount      Float
  safeId      String
  description String
  payer       String?
  beneficiary String?
  linkedRef   String?  // Reference to unit, contract, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  // Relations
  safe Safe @relation(fields: [safeId], references: [id], onDelete: Cascade)
  unit Unit? @relation(fields: [linkedRef], references: [id], onDelete: SetNull)
  
  @@map("vouchers")
}

// Brokers - مطابق لـ golden-dataset.json
model Broker {
  id        String   @id @default(cuid())
  name      String   @unique
  phone     String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  // Relations
  brokerDues BrokerDue[]
  
  @@map("brokers")
}

// BrokerDues - مطابق لـ golden-dataset.json
model BrokerDue {
  id        String   @id @default(cuid())
  brokerId  String
  amount    Float
  dueDate   DateTime
  status    String   @default("معلق")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  // Relations
  broker Broker @relation(fields: [brokerId], references: [id], onDelete: Cascade)
  
  @@map("broker_dues")
}

// PartnerGroups - مطابق لـ golden-dataset.json
model PartnerGroup {
  id        String   @id @default(cuid())
  name      String   @unique
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  
  // Relations
  partners         PartnerGroupPartner[]
  unitPartnerGroups UnitPartnerGroup[]
  
  @@map("partner_groups")
}

// PartnerGroupPartner - ربط الشركاء بالمجموعات
model PartnerGroupPartner {
  id              String   @id @default(cuid())
  partnerGroupId String
  partnerId       String
  percentage      Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?
  
  // Relations
  partnerGroup PartnerGroup @relation(fields: [partnerGroupId], references: [id], onDelete: Cascade)
  partner      Partner      @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  
  @@unique([partnerGroupId, partnerId])
  @@map("partner_group_partners")
}

// UnitPartnerGroup - ربط الوحدات بمجموعات الشركاء
model UnitPartnerGroup {
  id              String   @id @default(cuid())
  unitId          String
  partnerGroupId  String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?
  
  // Relations
  unit         Unit        @relation(fields: [unitId], references: [id], onDelete: Cascade)
  partnerGroup PartnerGroup @relation(fields: [partnerGroupId], references: [id], onDelete: Cascade)
  
  @@unique([unitId, partnerGroupId])
  @@map("unit_partner_groups")
}

// AuditLog - مطابق لـ golden-dataset.json
model AuditLog {
  id          String   @id @default(cuid())
  action      String
  entityType  String
  entityId    String
  oldValues   String?  // JSON string
  newValues   String?  // JSON string
  userId      String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  @@map("audit_logs")
}

// Settings - مطابق لـ golden-dataset.json
model Settings {
  id    String @id @default(cuid())
  key   String @unique
  value String
  
  @@map("settings")
}

// KeyVal - مطابق لـ golden-dataset.json
model KeyVal {
  id    String @id @default(cuid())
  key   String @unique
  value String
  
  @@map("keyval")
}