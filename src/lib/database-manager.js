/**
 * ูุฏูุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช - ููุชุจุฏูู ุจูู PostgreSQL ุงููุญูู ูุงูุณุญุงุจู
 * Database Manager - Switch between Local and Cloud PostgreSQL
 */

import { PrismaClient } from '@prisma/client';

class DatabaseManager {
    constructor() {
        this.localClient = null;
        this.cloudClient = null;
        this.currentMode = process.env.DB_MODE || 'local'; // 'local' or 'cloud'
    }

    /**
     * ุชููุฆุฉ ุงุชุตุงูุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช
     * Initialize database connections
     */
    async initialize() {
        try {
            // ุฅูุดุงุก ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญููุฉ
            if (process.env.DATABASE_URL) {
                this.localClient = new PrismaClient({
                    datasources: {
                        db: {
                            url: process.env.DATABASE_URL
                        }
                    }
                });
                console.log('โ ุชู ุฅูุดุงุก ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญููุฉ');
            }

            // ุฅูุดุงุก ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุณุญุงุจูุฉ (Neon)
            if (process.env.NEON_DATABASE_URL) {
                this.cloudClient = new PrismaClient({
                    datasources: {
                        db: {
                            url: process.env.NEON_DATABASE_URL
                        }
                    }
                });
                console.log('โ ุชู ุฅูุดุงุก ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุณุญุงุจูุฉ (Neon)');
            }

            // ุงุฎุชุจุงุฑ ุงูุงุชุตุงูุงุช
            await this.testConnections();
            
        } catch (error) {
            console.error('โ ุฎุทุฃ ูู ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
            throw error;
        }
    }

    /**
     * ุงุฎุชุจุงุฑ ุงูุงุชุตุงูุงุช ูุน ููุงุนุฏ ุงูุจูุงูุงุช
     * Test database connections
     */
    async testConnections() {
        const results = {};

        // ุงุฎุชุจุงุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญููุฉ
        if (this.localClient) {
            try {
                await this.localClient.$queryRaw`SELECT 1`;
                results.local = { status: 'success', message: 'ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญููุฉ ุชุนูู ุจุดูู ุตุญูุญ' };
                console.log('โ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญููุฉ: ูุชุตูุฉ');
            } catch (error) {
                results.local = { status: 'error', message: error.message };
                console.log('โ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญููุฉ: ุบูุฑ ูุชุตูุฉ');
            }
        }

        // ุงุฎุชุจุงุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุณุญุงุจูุฉ
        if (this.cloudClient) {
            try {
                await this.cloudClient.$queryRaw`SELECT 1`;
                results.cloud = { status: 'success', message: 'ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุณุญุงุจูุฉ (Neon) ุชุนูู ุจุดูู ุตุญูุญ' };
                console.log('โ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุณุญุงุจูุฉ (Neon): ูุชุตูุฉ');
            } catch (error) {
                results.cloud = { status: 'error', message: error.message };
                console.log('โ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุณุญุงุจูุฉ (Neon): ุบูุฑ ูุชุตูุฉ');
            }
        }

        return results;
    }

    /**
     * ุงูุญุตูู ุนูู ุงูุนููู ุงูุญุงูู
     * Get current database client
     */
    getClient() {
        if (this.currentMode === 'cloud' && this.cloudClient) {
            return this.cloudClient;
        }
        return this.localClient;
    }

    /**
     * ุงูุชุจุฏูู ุฅูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญููุฉ
     * Switch to local database
     */
    switchToLocal() {
        if (!this.localClient) {
            throw new Error('ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญููุฉ ุบูุฑ ูุชุงุญุฉ');
        }
        this.currentMode = 'local';
        console.log('๐ ุชู ุงูุชุจุฏูู ุฅูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญููุฉ');
        return this.localClient;
    }

    /**
     * ุงูุชุจุฏูู ุฅูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุณุญุงุจูุฉ
     * Switch to cloud database
     */
    switchToCloud() {
        if (!this.cloudClient) {
            throw new Error('ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุณุญุงุจูุฉ ุบูุฑ ูุชุงุญุฉ');
        }
        this.currentMode = 'cloud';
        console.log('๐ ุชู ุงูุชุจุฏูู ุฅูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุณุญุงุจูุฉ (Neon)');
        return this.cloudClient;
    }

    /**
     * ูุฒุงููุฉ ุงูุจูุงูุงุช ุจูู ููุงุนุฏ ุงูุจูุงูุงุช
     * Sync data between databases
     */
    async syncData(fromMode = 'local', toMode = 'cloud') {
        try {
            const sourceClient = fromMode === 'local' ? this.localClient : this.cloudClient;
            const targetClient = toMode === 'local' ? this.localClient : this.cloudClient;

            if (!sourceClient || !targetClient) {
                throw new Error('ุฅุญุฏู ููุงุนุฏ ุงูุจูุงูุงุช ุบูุฑ ูุชุงุญุฉ');
            }

            console.log(`๐ ุจุฏุก ูุฒุงููุฉ ุงูุจูุงูุงุช ูู ${fromMode} ุฅูู ${toMode}`);

            // ูุงุฆูุฉ ุงูุฌุฏุงูู ูููุฒุงููุฉ
            const tables = [
                'customers', 'units', 'partners', 'unitPartners', 'contracts', 
                'installments', 'partnerDebts', 'safes', 'transfers', 'vouchers',
                'brokers', 'brokerDues', 'partnerGroups', 'auditLogs', 'settings'
            ];

            for (const table of tables) {
                try {
                    // ุฌูุจ ุงูุจูุงูุงุช ูู ุงููุตุฏุฑ
                    const sourceData = await sourceClient[table].findMany();
                    
                    // ุญุฐู ุงูุจูุงูุงุช ุงูููุฌูุฏุฉ ูู ุงููุฏู
                    await targetClient[table].deleteMany();
                    
                    // ุฅุฏุฑุงุฌ ุงูุจูุงูุงุช ุงูุฌุฏูุฏุฉ
                    if (sourceData.length > 0) {
                        await targetClient[table].createMany({
                            data: sourceData,
                            skipDuplicates: true
                        });
                    }
                    
                    console.log(`โ ุชู ูุฒุงููุฉ ุฌุฏูู ${table}: ${sourceData.length} ุณุฌู`);
                } catch (error) {
                    console.error(`โ ุฎุทุฃ ูู ูุฒุงููุฉ ุฌุฏูู ${table}:`, error.message);
                }
            }

            console.log('โ ุชูุช ูุฒุงููุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ');
            return { success: true, message: 'ุชูุช ูุฒุงููุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ' };

        } catch (error) {
            console.error('โ ุฎุทุฃ ูู ูุฒุงููุฉ ุงูุจูุงูุงุช:', error);
            throw error;
        }
    }

    /**
     * ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
     * Create database backup
     */
    async createBackup(mode = 'local') {
        try {
            const client = mode === 'local' ? this.localClient : this.cloudClient;
            if (!client) {
                throw new Error(`ูุงุนุฏุฉ ุงูุจูุงูุงุช ${mode} ุบูุฑ ูุชุงุญุฉ`);
            }

            const backup = {
                timestamp: new Date().toISOString(),
                mode: mode,
                data: {}
            };

            // ูุงุฆูุฉ ุงูุฌุฏุงูู ูููุณุฎ ุงูุงุญุชูุงุทู
            const tables = [
                'customers', 'units', 'partners', 'unitPartners', 'contracts', 
                'installments', 'partnerDebts', 'safes', 'transfers', 'vouchers',
                'brokers', 'brokerDues', 'partnerGroups', 'auditLogs', 'settings'
            ];

            for (const table of tables) {
                try {
                    backup.data[table] = await client[table].findMany();
                } catch (error) {
                    console.error(`ุฎุทุฃ ูู ูุณุฎ ุฌุฏูู ${table}:`, error.message);
                }
            }

            return backup;

        } catch (error) {
            console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ:', error);
            throw error;
        }
    }

    /**
     * ุงุณุชุนุงุฏุฉ ูุณุฎุฉ ุงุญุชูุงุทูุฉ
     * Restore from backup
     */
    async restoreBackup(backup, targetMode = 'local') {
        try {
            const client = targetMode === 'local' ? this.localClient : this.cloudClient;
            if (!client) {
                throw new Error(`ูุงุนุฏุฉ ุงูุจูุงูุงุช ${targetMode} ุบูุฑ ูุชุงุญุฉ`);
            }

            console.log(`๐ ุจุฏุก ุงุณุชุนุงุฏุฉ ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ ุฅูู ${targetMode}`);

            for (const [table, data] of Object.entries(backup.data)) {
                try {
                    // ุญุฐู ุงูุจูุงูุงุช ุงูููุฌูุฏุฉ
                    await client[table].deleteMany();
                    
                    // ุฅุฏุฑุงุฌ ุงูุจูุงูุงุช ุงููุณุชุนุงุฏุฉ
                    if (data.length > 0) {
                        await client[table].createMany({
                            data: data,
                            skipDuplicates: true
                        });
                    }
                    
                    console.log(`โ ุชู ุงุณุชุนุงุฏุฉ ุฌุฏูู ${table}: ${data.length} ุณุฌู`);
                } catch (error) {
                    console.error(`โ ุฎุทุฃ ูู ุงุณุชุนุงุฏุฉ ุฌุฏูู ${table}:`, error.message);
                }
            }

            console.log('โ ุชูุช ุงุณุชุนุงุฏุฉ ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ ุจูุฌุงุญ');
            return { success: true, message: 'ุชูุช ุงุณุชุนุงุฏุฉ ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ ุจูุฌุงุญ' };

        } catch (error) {
            console.error('โ ุฎุทุฃ ูู ุงุณุชุนุงุฏุฉ ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ:', error);
            throw error;
        }
    }

    /**
     * ุฅุบูุงู ุงูุงุชุตุงูุงุช
     * Close database connections
     */
    async disconnect() {
        try {
            if (this.localClient) {
                await this.localClient.$disconnect();
                console.log('โ ุชู ุฅุบูุงู ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญููุฉ');
            }
            if (this.cloudClient) {
                await this.cloudClient.$disconnect();
                console.log('โ ุชู ุฅุบูุงู ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุณุญุงุจูุฉ');
            }
        } catch (error) {
            console.error('โ ุฎุทุฃ ูู ุฅุบูุงู ุงูุงุชุตุงูุงุช:', error);
        }
    }

    /**
     * ุงูุญุตูู ุนูู ุญุงูุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช
     * Get database status
     */
    getStatus() {
        return {
            currentMode: this.currentMode,
            localAvailable: !!this.localClient,
            cloudAvailable: !!this.cloudClient,
            timestamp: new Date().toISOString()
        };
    }
}

// ุฅูุดุงุก ูุซูู ูุงุญุฏ ูู ูุฏูุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช
const dbManager = new DatabaseManager();

export default dbManager;